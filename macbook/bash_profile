source ~/git/admin/bashrc
alias ls='/bin/ls -G'
alias esed='sed -E'
alias git.g='git log --graph --oneline --decorate'
alias git.p='git log -p --relative-date'
alias gitf='fork'
# added by Miniconda3 installer
export PATH="$HOME/local/bin:$HOME/anaconda3/bin:$PATH"
export RSTUDIO_WHICH_R=$HOME/anaconda3/bin/R

# python settings: 
#pip install ipdb, pytest, pandas
#pip install future, future-breakpoint, future-fstrings
export git_s4oad="$HOME/git/s4-oracle-alpha-db"
export PYTHONPATH="$git_s4oad/dev_patient_clinical/pca/py:$git_s4oad/dev_patient_clinical/pca/pca_zach/py"
#export PYTHONBREAKPOINT=IPython.core.debugger.set_trace #breakpoint()
    #from __future__ import (absolute_import, division, print_function)
    #from builtins import *
    #python -m ipdb test.py for postmortem debug


function start_ssh_tunnel {
    tunnel_name=$1; shift
    local_db_remote=$1; shift
    user_at_remote=$1; shift
    other_args=$@
    cmd="AUTOSSH_DEBUG=1 autossh -g -M 0 -N -L $local_db_remote $user_at_remote $other_args \
            -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            -o ServerAliveInterval=10 -o ServerAliveCountMax=1 \
            -o ExitOnForwardFailure=yes -o ControlMaster=no -o ControlPath=/dev/null"
    if ! screen -ls | grep -q "[0-9]\+.$tunnel_name\s"; then
        screen -S "$tunnel_name" -dm bash -c "$cmd"
    fi
}
export mimsdw_host='testjcappilot.cbf5xbk4ekux.us-east-1.rds.amazonaws.com'
export mimsdw_bastion='34.229.161.127'
export rdmsdw_host='s4-dmsdw.cswcn2wwxepe.us-east-1.redshift.amazonaws.com'
export rdmsdw_bastion='ec2-3-214-186-216.compute-1.amazonaws.com'
export rimsdw_host='auto-abst-redshift-cluster.cpgxfro2regq.us-east-1.redshift.amazonaws.com'
export rimsdw_bastion='auto-abst-bastion-host-lb-542f9513ec56d4ad.elb.us-east-1.amazonaws.com'
#ssh -L 9998:$rdmsdw_host:5439 zongzhi_liu@$bastion
mdmsdw_host='s4-radbinf-msdw-de-2017-sean.cbf5xbk4ekux.us-east-1.rds.amazonaws.com'
mdmsdw_bastion='52.22.79.171'

function start_all_port_forwarding {
    #_start_mysql_port_forwarding
    start_ssh_tunnel db2 5000:localhost:3306 mysql_tunnel@34.235.71.97 \
        -i $HOME/.ssh/tunnel_user
    start_ssh_tunnel mdmsdw 6000:$mdmsdw_host:3306 msdw_tunnel@$mdmsdw_bastion \
        -i $HOME/.ssh/msdw_tunnel
    start_ssh_tunnel mimsdw 7000:$mimsdw_host:3306 zachary_liu@$mimsdw_bastion
    start_ssh_tunnel rdmsdw 9998:$rdmsdw_host:5439 zongzhi_liu@$rdmsdw_bastion
    start_ssh_tunnel rimsdw 9999:$rimsdw_host:5439 zach_liu@$rimsdw_bastion
}
# screen -ls | grep Detached | cut -d. -f1 | xargs kill
export PGHOST=localhost
export PGUSER=zongzhi_liu
alias rdmsdw="PGPASSWORD=$(< ~/.pgpassword_rdmsdw); PGPORT=9998; PGDATABASE=s4_dmsdw_2019_q1"
alias rimsdw="PGPASSWORD=$(< ~/.pgpassword_rimsdw); PGPORT=9999; PGDATABASE=dev"
#usage rdmsdw; psql/pgcli ...

alias mimsdw.mycli='mycli --defaults-file=~/.my.imsdw.cnf'
alias mdmsdw.mycli='mycli --defaults-file=~/.my.msdw.cnf'
alias db2.mycli='mycli'

#remap right alt to right ctrl: deprecated in favor of iterm2 conf
#ref: https://apple.stackexchange.com/questions/283252/how-do-i-remap-a-key-in-macos-sierra-e-g-right-alt-to-right-control
right_alt_2_ctrl () {
	hidutil property --set '{"UserKeyMapping":
	    [{"HIDKeyboardModifierMappingSrc":0x7000000e6,
	      "HIDKeyboardModifierMappingDst":0x7000000e4}]
	}' > NULL
}

right_alt_2_ctrl
# alias vim='/usr/bin/vim'

#function timer_start {
#  timer=${timer:-$SECONDS}
#}
#
#function timer_stop {
#  timer_show=$(($SECONDS - $timer))
#  unset timer
#  # Write out the history
#  if [ "$(id -u)" -ne 0 ]; then echo "$(date -u +"%Y-%m-%dT%H:%M:%SZ") $(pwd) $(history 1 | sed 's/^[0-9]\+\s\+//')" >> ~/.logs/bash-history-$(date "+%Y-%m-%d").log; fi
#}
#
#if [ "$PROMPT_COMMAND" == "" ]; then
#  PROMPT_COMMAND="timer_stop"
#else
#  PROMPT_COMMAND="$PROMPT_COMMAND; timer_stop"
#fi
#export THIS_COMP="Laptop"
#export PS1="\n\[$(tput bold)\]\[$(tput setaf 7)\]\$([[ \$? != 0 ]] && tput setaf 1)#[\$(date +%k:%M:%S)|\${timer_show}s]\[$(tput setaf 2)\] \u\[$(tput setaf 5)\] @ $THIS_COMP :\[$(tput setaf 3)\]\w \[$(tput setaf 3)\]    \$(__git_ps1)\n\[$(tput setaf 3)\]"
#trap "timer_start; echo -ne $'\e[0m'" DEBUG
#

#curl -L https://raw.github.com/git/git/master/contrib/completion/git-prompt.sh > ~/.bash_git
#source ~/.bash_git
#export PS1='$(__git_ps1 "[%s]") \W/\$ '
export PS1='\W\$ '

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/zongzhiliu/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup" > /dev/null #turn off the msg of deactivate-gfortran_osx-64.sh
else
    if [ -f "/Users/zongzhiliu/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/zongzhiliu/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/zongzhiliu/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<


export OA_DB_SERVER=rimsdw2
export SCHEMA_NAME='cohort_filters'
export CLIN_REPO_DIR=$HOME/git/s4-oracle-alpha-db/dev_patient_clinical
source ~/git/s4-oracle-alpha-db/chaos/nick/psql_env.sh
    #PGPASSFILE="${HOME}/.pgpass_${OA_DB_SERVER}"
    #export PGHOST; export PGPORT; export PGDATABASE; export PGUSER
    #export PSQL="psql --echo-all --no-psqlrc -v ON_ERROR_STOP=1"
#usage: query_from_oa_db 'select * from dev_patient_clincal_info.notes_v11' > tmp.csv
function query_from_oa_db { sql=$1
    select_from_db_schema_table.py $OA_DB_SERVER -q "$sql"
}

#usage: load_into_oa_schema tmp/tmp.csv
function load_into_oa_schema { csvfile=$1
    load_into_db_schema_some_csvs.py -d $OA_DB_SERVER ${SCHEMA_NAME} "${csvfile}"
}

# brew installed vim
#export PATH=/usr/local/Cellar/vim/8.1.1700/bin:$PATH
alias gvim='/Applications/MacVim.app/Contents/MacOS/Vim -g'
